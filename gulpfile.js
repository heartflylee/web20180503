// Generated by CoffeeScript 1.12.7
var autoprefixer,
  browserSync,
  changed,
  del,
  fileinclude,
  gulp,
  minify,
  plumber,
  runSequence,
  sass,
  sourcemaps;

gulp = require('gulp');

fileinclude = require('gulp-file-include');

minify = require('gulp-clean-css');

sass = require('gulp-sass');

browserSync = require('browser-sync');

del = require('del');

runSequence = require('run-sequence');

autoprefixer = require('gulp-autoprefixer');

plumber = require('gulp-plumber');

sourcemaps = require('gulp-sourcemaps');

changed = require('gulp-changed');

gulp.task('default', function(callback) {
  return runSequence(['clean'], ['build'], ['serve', 'watch'], callback);
});

gulp.task('clean', function(callback) {
  return del(['./dist/'], callback);
});

gulp.task('build', function(callback) {
  return runSequence(
    ['concatHtml', 'copy', 'copyJson'],
    ['sassCss', 'miniJs', 'miniImg'],
    callback
  );
});

gulp.task('reserve', function() {
  return runSequence(['concatHtml'], ['sassCss'], ['miniJs']);
});

gulp.task('sassCss', function() {
  return gulp
    .src('./src/scss/*.scss')
    .pipe(
      changed('./dist/css', {
        hasChanged: changed.compareSha1Digest,
      })
    )
    .pipe(sourcemaps.init())
    .pipe(plumber())
    .pipe(sass())
    .pipe(
      autoprefixer({
        browsers: [
          'last 8 versions',
          'Explorer >=6',
          'Safari >=3',
          'Chrome >=35',
          'Android >= 4.0',
          'Opera >=35',
          'last 5 OperaMobile versions',
          'last 5 OperaMini versions',
          'last 5 FirefoxAndroid versions',
          'last 5 ChromeAndroid versions',
          '> 1%',
          'Firefox >= 14',
          'Firefox ESR',
          'ie 8',
          'ie 7',
          'ie 6',
          'IOS 7',
        ],
        cascade: true,
        remove: true,
        add: true,
        flexbox: true,
      })
    )
    .pipe(minify())
    .pipe(minify({ compatibility: 'ie8' }))
    .pipe(sourcemaps.write('./map'))
    .pipe(plumber.stop())
    .pipe(gulp.dest('./dist/css'));
});

gulp.task('miniJs', function() {
  return gulp
    .src('./src/js/*.js')
    .pipe(
      changed('./dist/js', {
        hasChanged: changed.compareSha1Digest,
      })
    )
    .pipe(plumber())
    .pipe(plumber.stop())
    .pipe(gulp.dest('./dist/js/'));
});

gulp.task('miniImg', function() {
  return gulp
    .src('./src/img/*.*')
    .pipe(
      changed('./dist/img', {
        hasChanged: changed.compareSha1Digest,
      })
    )
    .pipe(plumber())
    .pipe(plumber.stop())
    .pipe(gulp.dest('./dist/img/'));
});

gulp.task('concatHtml', function() {
  gulp
    .src(['./src/page/*.html'])
    .pipe(
      changed('./dist/', {
        hasChanged: changed.compareSha1Digest,
      })
    )
    .pipe(plumber())
    .pipe(
      fileinclude({
        prefix: '@@',
        basepath: '@file',
        context: {
          name: 'test',
        },
      })
    )
    .pipe(plumber.stop())
    .pipe(gulp.dest('./dist/'));
});

gulp.task('copy', function() {
  return gulp
    .src(['./src/fonts/*.*'])
    .pipe(
      changed('./dist/fonts', {
        hasChanged: changed.compareSha1Digest,
      })
    )
    .pipe(gulp.dest('./dist/fonts/'));
});

gulp.task('copyJson', function() {
  return gulp
    .src(['./src/json/*.json'])
    .pipe(
      changed('./dist/json', {
        hasChanged: changed.compareSha1Digest,
      })
    )
    .pipe(gulp.dest('./dist/json/'));
});

gulp.task('serve', function() {
  return browserSync.init({
    server: {
      baseDir: './dist/',
    },
    port: 7413,
  });
});

gulp.task('watch', function() {
  gulp.watch(['./src/js/*.js'], ['miniJs']);
  gulp.watch('./src/scss/**/*.scss', ['sassCss']);
  gulp.watch(['./src/page/*.html', './src/components/*.html'], ['concatHtml']);
  gulp.watch('./src/json/*.json', ['copyJson']);
  return runSequence(['reload-browser']);
});

gulp.task('reload', function(callback) {
  return runSequence(['build'], ['reload-browser'], callback);
});

gulp.task('reload-browser', function() {
  return browserSync.reload();
});
